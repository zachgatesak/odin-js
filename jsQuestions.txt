JS Stylesheet examples:
  1. https://github.com/airbnb/javascript
  2. http://contribute.jquery.org/style-guide/js/
  3. 

1. How do you include a Javascript file in your HTML file?
  1.1 <script src="script.js"></script>
2. How do you include Javascript directly in your HTML code?
  2.1 within <html><body><script>//Code goes here</script>
3. How can you write and run your Javascript code using programs like jsfiddle?
  3.1 JS fiddle is a html/css/JS sandbox that auto-loads the results within an iframe. This allows you to see the results of your code as you are writing them.
4. How do you create a new object using the "Constructor" method?
  4.1 info: https://css-tricks.com/understanding-javascript-constructors/
  4.2. A constructor is useful when you want to create multiple similar objects with the same properties and methods. Itâ€™s a convention to capitalize the name of constructors to distinguish them from regular functions.
  4.3. TLDR: allows for class-like asignment, and invoked with the 'new' keyword
  4.4. example:
                function Book() {
              // unfinished code
              }
              var myBook = new Book();
  4.5. Usually indicated by a function starting with a capital letter.
  4.6. The root constructor (class) can be found by using the 'instanceof' keyword:
      myBook instanceof Book    // true
      myBook instanceof String  // false

5. How do you create a new object using the "Literal" method?
  5.1 Object(), Array(), String(), Number(), Boolean(), Date(), Function(), Error() and RegExp()
  5.2 Object literals are not only easier to read but also faster to run because they can be optimize at parse time.

6. What does JS return if you try to access an object's attribute that doesn't exist?
  6.1 undefined.
  6.2. example:
    6.2.1 var zach = {};
    6.2.2 console.log(zach.name); //undefined

7. How do you add items to or remove items from an array?
  7.1 pop() removes the last element from an array
    7.1.1 example:
        var arr = ['a','b','c','d','e','f'];
        var el = arr.pop();
        test(arr); // length:5, 0:a, 1:b, 2:c, 3:d, 4:e
        console.log(el); // f
  7.2 shift() removes the first element from an array
        var arr = ['a','b','c','d','e','f'];
        var el = arr.shift();
        test(arr); // length:5, 0:b, 1:c, 2:d, 3:e, 4:f
        console.log(el); // a
  7.3 splice() can remove existing elements
        var arr1 = ['a','b','c','d','e','f'];
        var arr2 = arr1.splice(0,2); // remove 2 elements starting at index 0
        test(arr1); // length:4, 0:c, 1:d, 2:e, 3:f
        test(arr2); // length:2, 0:a, 1:b

        var arr1 = ['a','b','c','d','e','f',,,'i'];
        var arr2 = arr1.splice(6,2); // remove 2 elements starting at index 6
        test(arr1); // length:7, 0:a, 1:b, 2:c, 3:d, 4:e, 5:f, 6:i
        test(arr2); // length:2
8. What is the difference between =, ==, and ===?
  8.1 "=" is used for assignments.
  8.2 "==" eqaulity operator (less strict comparison)
  8.3 "===" identity operator (Strict comparison)
9. Are these "truthy" or "falsy" in JS:
  9.1 "0" = truthy
  9.2 NaN = falsy
  9.3 null = falsy
  9.4 "words" = truthy
  9.5 "" = falsy
  9.6 [] = truthy
  9.7 undefined = falsy
  9.8 {} = truthy
  9.9 1 = truthy
  9.10 0 = falsy
10. How do you get the length of a string?
  10.1 a.length => the number of elements in the array.
11. How do you find a value within a string?
  11.1 simply by calling the value itself or by calling components of it like an array:
    let a = "abcdefg";
    for (var i =0 ; i < a.length; i++){
    console.log(a[i]);
    }
12. How does a "switch" statement work?
  12.1 allows you to do one asessment and perform several different outcomes.
  12.2 The use of case fall through also allows for multiple actions to be taken.
13. How can you use objects to accomplish the same task?
  13.1 you can simply create a function that contains an object with some predetermined actions.
    this is done by returning a function based of what is passed into the function.

14. How do you set up a for loop? A for...in loop?
  14.1 for(let i; i <a.length; i++){//Code}
  14.2 for(i in a) {//code} (This generally is not preferred as it will loop through every property of the object.)

15. How do you set up a while loop?
  15.1 while(condition){code}

16. How do you break out of a loop or skip to the next iteration?
  16.1 return;

17. What are "reserved words"?
  17.1 Reserved words are those reserved by the authors of JS
    things like class, true, in, of. These reserved words cannot be used as variables.
  17.2 abstract, class, const, continue, debugger, else, float,
  for, function, goto, instanceof, null, package, private, protected.

18. How do you concatenate two arrays together?
  18.1 var newArr = arr1.concat(arr2);

19. How do you sort arrays? Reverse them?
  19.1 a.sort() the sort method will put things in alphabetical order for strings and by smallest to greatest in numerical
  19.2 Numbers > Capitals > Lowercase
  19.3 a.reverse();

20. How do you use the #forEach method to print each item in an array?
  20.1 a.forEach(//code);

21. How are Javascript objects similar to hashes in Ruby?
  21.1 ###

22. How are functions declared (two ways)?
  22.1 function declaration
    22.1.1 Example
      function name(param1,param2){
      statements
      }
    22.1.2 Straight forward.
    22.1.3 A function declaration is no longer a declaration when:
      22.1.3.1 Becomes part of an expression
      22.1.3.2 is no longer a "source element" of a function or the script itself.
        (e.g. a non-nested statement in the script or a function body)

  22.2 function expression
    22.2.1 Statements involving functions which do not start with function are function expressions
    22.2.2 Example:
      var a = function optionalName(){};
  22.3 shorthand method definition
    22.3.1 Example
    22.3.2

  22.4 Arrow function
    22.4.1 Example
      (params) => {statements}
      Note: a single param does not require parenthesis.

  22.5 Generator function
    22.5.1 Example:
      function* name(param){statements}

  22.6 function constructor.
    22.6.1 Example
      var multiply = new Function('x', 'y', 'return x * y');

  22.7 IIFE (Immediately Invokable function expressions)
    22.7.1 A function expression that will be ran as soon as it is declared.
    22.7.2 (function(){statements});

  22.8 Differences:
    22.8.1 Function names cannot be changed, while function expressions (assigned to a variable can be changed)
    22.8.2 Function names can only be used within the function's body.
    22.8.3 Function names are viewable by using the function's toString method.
    22.8.4 A variable is limited only by its scope, which will always include the scope in which the function is declared.
    22.8.5 A function declaration also creates a variable with the same name as the function name, thus is accessble to the scope of that variable.
    22.8.6 Function declarations can be called before the function is created
    22.8.7

23. What are "anonymous functions"? How are they similar to blocks in Ruby?
  23.1 Anonymous functions are simply functions with no function name attached. Often they are just imediately invoked, and done, or tied to a variable to allow the function to be called when needed.

24. How can you pass a function arguments?
  24.1. Parameters are used to pass function arguments.

25. What does a function return?
  25.1 a value.
  25.2. Default value is the value of the 'this' parameter
  25.3 For all other function it will reutnr a value of undefined.

26. What are "immediately invoked function expressions (IIFE)"?
  26.1 a function that is ran immediately after being declared.
27. If a function has been saved to a variable some_var, what's the difference between how you would pass the function itself around instead of running it immediately when called? (hint: parentheses)
  27.1 To move a variable that is asigned a function you would simple move it with the variable name itself.
  27.2 to call a variable assigned to a function you would append '()' with whatever params desired after the name of the variable.

28. How do you test what the Type of an object is? (e.g. string, number, function, undefined...)
  28.1 the typeOf method
  28.2 Example. a.typeOf //string

29. What is this set to in Javascript?
  29.1 When a function is created, a keyword called this is created
    which links to the objec ttin which the function operates.
    A reference to the object of which that function is a property/method
    of.

30. How is this similar to and different from Ruby's self?
  30.1 N/a

31. How to you make a variable in the global scope? The local scope?
  31.1 simply do a var declaration outside of all functions and base objects.

32. Why are closures useful?
  32.1 They allow for code to be reused without worry of overlapping or misdirection of variable information.
  32.2 Allows for privitization of code

33. How would you use a closure to "close" a value within a function?
  33.1 simply declare the variable from within the function and do not return the variable itself.

34. How does #bind make your life simpler when thinking about closures and scopes?
  34.1 the bind() method allows for a new function that when called has its this keyword set to the provided value.
